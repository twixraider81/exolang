// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("helloworld", getGlobalContext());
 mod->setDataLayout("");
 mod->setTargetTriple("cpp");
 
 // Type Definitions
 ArrayType* ArrayTy_0 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 13);
 
 PointerType* PointerTy_1 = PointerType::get(ArrayTy_0, 0);
 
 PointerType* PointerTy_2 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);
 
 std::vector<Type*>FuncTy_3_args;
 FuncTy_3_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_3 = FunctionType::get(
  /*Result=*/PointerTy_2,
  /*Params=*/FuncTy_3_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_4_args;
 FuncTy_4_args.push_back(PointerTy_2);
 FunctionType* FuncTy_4 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_4_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_5_args;
 FunctionType* FuncTy_5 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 64),
  /*Params=*/FuncTy_5_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_7 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 PointerType* PointerTy_6 = PointerType::get(PointerTy_7, 0);
 
 std::vector<Type*>FuncTy_9_args;
 FuncTy_9_args.push_back(PointerTy_7);
 FunctionType* FuncTy_9 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 64),
  /*Params=*/FuncTy_9_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_8 = PointerType::get(FuncTy_9, 0);
 
 
 // Function Declarations
 
 Function* func_malloc = mod->getFunction("malloc");
 if (!func_malloc) {
 func_malloc = Function::Create(
  /*Type=*/FuncTy_3,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"malloc", mod); // (external, no body)
 func_malloc->setCallingConv(CallingConv::C);
 }
 AttributeSet func_malloc_PAL;
 func_malloc->setAttributes(func_malloc_PAL);
 
 Function* func_free = mod->getFunction("free");
 if (!func_free) {
 func_free = Function::Create(
  /*Type=*/FuncTy_4,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"free", mod); // (external, no body)
 func_free->setCallingConv(CallingConv::C);
 }
 AttributeSet func_free_PAL;
 func_free->setAttributes(func_free_PAL);
 
 Function* func_helloworld = mod->getFunction("helloworld");
 if (!func_helloworld) {
 func_helloworld = Function::Create(
  /*Type=*/FuncTy_5,
  /*Linkage=*/GlobalValue::InternalLinkage,
  /*Name=*/"helloworld", mod); 
 func_helloworld->setCallingConv(CallingConv::C);
 }
 AttributeSet func_helloworld_PAL;
 func_helloworld->setAttributes(func_helloworld_PAL);
 
 Function* func_puts = mod->getFunction("puts");
 if (!func_puts) {
 func_puts = Function::Create(
  /*Type=*/FuncTy_9,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"puts", mod); // (external, no body)
 func_puts->setCallingConv(CallingConv::C);
 }
 AttributeSet func_puts_PAL;
 func_puts->setAttributes(func_puts_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_array_10 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_0,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"");
 
 // Constant Definitions
 Constant *const_array_11 = ConstantDataArray::getString(mod->getContext(), "Hello World!", true);
 ConstantInt* const_int32_12 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 std::vector<Constant*> const_ptr_13_indices;
 ConstantInt* const_int32_14 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 const_ptr_13_indices.push_back(const_int32_14);
 const_ptr_13_indices.push_back(const_int32_14);
 Constant* const_ptr_13 = ConstantExpr::getGetElementPtr(gvar_array_10, const_ptr_13_indices);
 ConstantInt* const_int64_15 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
 
 // Global Variable Definitions
 gvar_array_10->setInitializer(const_array_11);
 
 // Function Definitions
 
 // Function: helloworld (func_helloworld)
 {
  
  BasicBlock* label_helloworld = BasicBlock::Create(mod->getContext(), "helloworld",func_helloworld,0);
  
  // Block helloworld (label_helloworld)
  AllocaInst* ptr_16 = new AllocaInst(PointerTy_7, "", label_helloworld);
  StoreInst* void_17 = new StoreInst(const_ptr_13, ptr_16, false, label_helloworld);
  LoadInst* ptr_18 = new LoadInst(ptr_16, "", false, label_helloworld);
  CallInst* int64_puts = CallInst::Create(func_puts, ptr_18, "puts", label_helloworld);
  int64_puts->setCallingConv(CallingConv::C);
  int64_puts->setTailCall(false);
  AttributeSet int64_puts_PAL;
  int64_puts->setAttributes(int64_puts_PAL);
  
  AllocaInst* ptr_19 = new AllocaInst(IntegerType::get(mod->getContext(), 64), "", label_helloworld);
  StoreInst* void_20 = new StoreInst(int64_puts, ptr_19, false, label_helloworld);
  ReturnInst::Create(mod->getContext(), const_int64_15, label_helloworld);
  
 }
 
 return mod;
}
