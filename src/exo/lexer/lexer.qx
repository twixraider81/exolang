/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

header {
	#include "exo/exo.h"
}

/**
 * TODO: We will need more MODES, for i.e. strings.
 * The token identifiers are generated by lemon, besides TERMINATION & UNINITIALIZED which need special treatment
 */
start = EXO;

mode EXO:
/**
 * handle whitespace and comments directly in the lexer
 */
<skip: [ \r\n\t]>					/* skip whitespace */
<skip_nested_range: "/*" "*/">		/* skip multiline comments */
<skip_range: "//" "\n">				/* skip singleline comments */
<skip_range: "#" "\n">				/* skip singleline comments */
{
	<<EOF>>							=> QUEX_TKN_TERMINATION;
	<<FAIL>>						{ BOOST_THROW_EXCEPTION( exo::exceptions::UnknownToken(reinterpret_cast<const char*>(Lexeme)) ); }

	"__HALT__"						=> QUEX_TKN_TERMINATION;
	"__halt_compiler"				=> QUEX_TKN_TERMINATION;
	"__FILE__"						=> QUEX_TKN_S_FILE(Lexeme);
	"__LINE__"						=> QUEX_TKN_S_LINE(Lexeme);
	"bool"							=> QUEX_TKN_T_TBOOL;
	"boolean"						=> QUEX_TKN_T_TBOOL;
	"int"							=> QUEX_TKN_T_TINT;
	"integer"						=> QUEX_TKN_T_TINT;
	"float"							=> QUEX_TKN_T_TFLOAT;
	"string"						=> QUEX_TKN_T_TSTRING;
	"auto"							=> QUEX_TKN_T_TAUTO;
	"callable"						=> QUEX_TKN_T_TCALLABLE;
	"function"						=> QUEX_TKN_S_FUNCTION;

	";"								=> QUEX_TKN_S_SEMICOLON;
	","								=> QUEX_TKN_S_COMMA;

	"null"							=> QUEX_TKN_T_VNULL;
	"true"							=> QUEX_TKN_T_VTRUE;
	"false"							=> QUEX_TKN_T_VFALSE;
	[0-9]+							=> QUEX_TKN_T_VINT(Lexeme);
	([0-9]+[.,][0-9]*)				=> QUEX_TKN_T_VFLOAT(Lexeme);

	"$"([_a-zA-Z\\]+[_a-zA-Z\\0-9]*) => QUEX_TKN_T_VAR(LexemeBegin+1,LexemeEnd);
	([_a-zA-Z\\]+[_a-zA-Z\\0-9]*)	=> QUEX_TKN_T_ID(Lexeme);

	"("								=> QUEX_TKN_S_LANGLE;
	")"								=> QUEX_TKN_S_RANGLE;
	"{"								=> QUEX_TKN_S_LBRACKET;
	"}"								=> QUEX_TKN_S_RBRACKET;
	"="								=> QUEX_TKN_S_ASSIGN;
	"=="							=> QUEX_TKN_S_EQ;
	"!="							=> QUEX_TKN_S_NE;
	"<"								=> QUEX_TKN_S_LT;
	"<="							=> QUEX_TKN_S_LE;
	">"								=> QUEX_TKN_S_GT;
	">="							=> QUEX_TKN_S_GE;
	"+"								=> QUEX_TKN_S_PLUS;
	"-"								=> QUEX_TKN_S_MINUS;
	"*"								=> QUEX_TKN_S_MUL;
	"/"								=> QUEX_TKN_S_DIV;
}