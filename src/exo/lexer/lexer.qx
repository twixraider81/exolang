/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

header {
	#include "exo/exo.h"

	#define LEXEMESTR(s) std::string( reinterpret_cast<const char*>( s ) )
	#define TOKENSTR(s) LEXEMESTR( s->get_text().c_str() )
}

/**
 * token identifiers are generated by lemon, besides TERMINATION & UNINITIALIZED which need special treatment
 */
start = EXO;

/**
 * common patterns
 */
define
{
	P_ID	([_a-zA-Z]+[_a-zA-Z0-9]*)	/* an identifier is an alpha char or underscore, minus, followed by any amount of alphanumeric or udnerscore characters */
	P_NS	"::"						/* namespace denotifier */
}

/**
 * handle whitespace and comments directly in the lexer
 */
mode EXO:
<skip: [ \r\n\t\f]>					/* skip whitespace */
<skip_nested_range: "/*" "*/">		/* skip multiline comments */
<skip_range: "//" "\n">				/* skip singleline comments */
<skip_range: "#" "\n">				/* skip singleline comments */
{
	<<EOF>>							=> QUEX_TKN_TERMINATION;
	<<FAIL>>						{
		EXO_THROW( UnknownToken() << exo::exceptions::TokenName( LEXEMESTR(Lexeme) ) );
	}

	on_skip_range_open				{
		self_send(QUEX_TKN_TERMINATION);
	}

	"__HALT__"						=> QUEX_TKN_TERMINATION;
	"__FILE__"						=> QUEX_TKN_T_CONST_FILE;
	"__LINE__"						=> QUEX_TKN_T_CONST_LINE;
	"__COLUMN__"					=> QUEX_TKN_T_CONST_COLUMN;
	"__TARGET__"					=> QUEX_TKN_T_CONST_TARGET;
	"__VERSION__"					=> QUEX_TKN_T_CONST_VERSION;
	"__MODULE__"					=> QUEX_TKN_T_CONST_MODULE;

	"bool"							=> QUEX_TKN_T_TBOOL;
	"boolean"						=> QUEX_TKN_T_TBOOL;
	"int"							=> QUEX_TKN_T_TINT;
	"integer"						=> QUEX_TKN_T_TINT;
	"float"							=> QUEX_TKN_T_TFLOAT;
	"double"						=> QUEX_TKN_T_TFLOAT;
	"str"							=> QUEX_TKN_T_TSTRING;
	"string"						=> QUEX_TKN_T_TSTRING;
	"auto"							=> QUEX_TKN_T_TAUTO;
	"callable"						=> QUEX_TKN_T_TCALLABLE;

	"module"						=> QUEX_TKN_T_MODULE;
	"use"							=> QUEX_TKN_T_USE;
	"import"						=> QUEX_TKN_T_IMPORT;

	"fn"							=> QUEX_TKN_T_FUNCTION;
	"function"						=> QUEX_TKN_T_FUNCTION;
	"return"						=> QUEX_TKN_T_RETURN;
	"ref"							=> QUEX_TKN_T_REF;

	"if"							=> QUEX_TKN_T_IF;
	"else"							=> QUEX_TKN_T_ELSE;
	"while"							=> QUEX_TKN_T_WHILE;
	"for"							=> QUEX_TKN_T_FOR;
	"do"							=> QUEX_TKN_T_DO;
	"switch"						=> QUEX_TKN_T_SWITCH;
	"continue"						=> QUEX_TKN_T_CONTINUE;
	"break"							=> QUEX_TKN_T_BREAK;
	"case"							=> QUEX_TKN_T_CASE;
	"default"						=> QUEX_TKN_T_DEFAULT;

	"class"							=> QUEX_TKN_T_CLASS;
	"method"						=> QUEX_TKN_T_FUNCTION;
	"extends"						=> QUEX_TKN_T_EXTENDS;
	"public"						=> QUEX_TKN_T_PUBLIC;
	"private"						=> QUEX_TKN_T_PRIVATE;
	"protected"						=> QUEX_TKN_T_PROTECTED;
	"->"							=> QUEX_TKN_T_PTR;
	"new"							=> QUEX_TKN_T_NEW;

	"delete"						=> QUEX_TKN_T_DELETE;
	"unset"							=> QUEX_TKN_T_DELETE;

	";"								=> QUEX_TKN_T_SEMICOLON;
	":"								=> QUEX_TKN_T_COLON;
	","								=> QUEX_TKN_T_COMMA;
	"..."							=> QUEX_TKN_T_VARG;

	"null"							=> QUEX_TKN_T_VNULL;
	"true"							=> QUEX_TKN_T_VTRUE;
	"false"							=> QUEX_TKN_T_VFALSE;
	([:digit:]+)					=> QUEX_TKN_S_INT(Lexeme);
	([:digit:]+[.][:digit:]*)		=> QUEX_TKN_S_FLOAT(Lexeme);

	"$"({P_ID})						=> QUEX_TKN_S_VAR(LexemeBegin+1,LexemeEnd);
	({P_NS}?({P_ID}{P_NS})+)		=> QUEX_TKN_S_NS(Lexeme);
	({P_ID})						=> QUEX_TKN_S_ID(Lexeme);

	"("								=> QUEX_TKN_T_LANGLE;
	")"								=> QUEX_TKN_T_RANGLE;
	"{"								=> QUEX_TKN_T_LBRACKET;
	"}"								=> QUEX_TKN_T_RBRACKET;
	"="								=> QUEX_TKN_T_ASSIGN;
	"+="							=> QUEX_TKN_T_ASSIGN_PLUS;
	"-="							=> QUEX_TKN_T_ASSIGN_MINUS;
	"*="							=> QUEX_TKN_T_ASSIGN_MUL;
	"/="							=> QUEX_TKN_T_ASSIGN_DIV;
	"=="							=> QUEX_TKN_T_EQ;
	"!="							=> QUEX_TKN_T_NE;
	"<"								=> QUEX_TKN_T_LT;
	"<="							=> QUEX_TKN_T_LE;
	">"								=> QUEX_TKN_T_GT;
	">="							=> QUEX_TKN_T_GE;
	"+"								=> QUEX_TKN_T_PLUS;
	"-"								=> QUEX_TKN_T_MINUS;
	"*"								=> QUEX_TKN_T_MUL;
	"/"								=> QUEX_TKN_T_DIV;
	"&"								=> QUEX_TKN_T_AMP;

	"\""							{
		self_send(QUEX_TKN_T_QUOTE);
		self << DOUBLE_STRING;
		RETURN;
	}

	"'"								{
		self_send(QUEX_TKN_T_QUOTE);
		self << SINGLE_STRING;
		RETURN;
	}
}


mode DOUBLE_STRING:
<entry: EXO>
<exit:  EXO>
{
	<<EOF>>							=> QUEX_TKN_TERMINATION;
	<<FAIL>>						{ self_accumulator_add(Lexeme, LexemeEnd); }

	on_entry						{
		self_accumulator_clear();
	}

	on_exit							{ 
		self_accumulator_flush(QUEX_TKN_S_STRING); 
		self_send(QUEX_TKN_T_QUOTE);
	}

	"\\r"							{ self_accumulator_add_character( '\r' ); } /* carriage return */
	"\\n"							{ self_accumulator_add_character( '\n' ); } /* newline */
	"\\t"							{ self_accumulator_add_character( '\t' ); } /* horizontal tab */
	"\\v"							{ self_accumulator_add_character( '\v' ); } /* vertical tab */
	"\\f"							{ self_accumulator_add_character( '\f' ); } /* form feed */
	"\\b"							{ self_accumulator_add_character( '\b' ); } /* backspace */
	"\\e"							{ self_accumulator_add_character( '\e' ); } /* escape */
	"\\a"							{ self_accumulator_add_character( '\a' ); } /* alarm/beep */
	"\\0"							{ self_accumulator_add_character( '\0' ); } /* null character */
	"\\\""							{ self_accumulator_add(LexemeBegin+1, LexemeEnd); }
	"\\\\"							{ self_accumulator_add(LexemeBegin+1, LexemeEnd); }
	"\""							{ self << EXO; RETURN; }
	.								{ self_accumulator_add(Lexeme, LexemeEnd); }
}


mode SINGLE_STRING:
<entry: EXO>
<exit:  EXO>
{
	<<EOF>>							=> QUEX_TKN_TERMINATION;
	<<FAIL>>						{ self_accumulator_add(Lexeme, LexemeEnd); }

	on_entry						{
		self_accumulator_clear();
	}

	on_exit							{ 
		self_accumulator_flush(QUEX_TKN_S_STRING); 
		self_send(QUEX_TKN_T_QUOTE);
	}

	"\\'"							{ self_accumulator_add(LexemeBegin, LexemeEnd); }
	"\\\\"							{ self_accumulator_add(LexemeBegin, LexemeEnd); }
	"'"								{ self << EXO; RETURN; }
	.								{ self_accumulator_add(Lexeme, LexemeEnd); }
}