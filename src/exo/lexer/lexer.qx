/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

header {
	#include "exo/exo.h"

	#define LEXEMESTR(s) std::string( reinterpret_cast<const char*>( s ) )
	#define TOKENSTR(s) LEXEMESTR( s->get_text().c_str() )
}

/**
 * The token identifiers are generated by lemon, besides TERMINATION & UNINITIALIZED which need special treatment
 */
start = EXO;

mode EXO:
/**
 * handle whitespace and comments directly in the lexer
 */
<skip: [ \r\n\t\f]>					/* skip whitespace */
<skip_nested_range: "/*" "*/">		/* skip multiline comments */
<skip_range: "//" "\n">				/* skip singleline comments */
<skip_range: "#" "\n">				/* skip singleline comments */
{
	<<EOF>>							=> QUEX_TKN_TERMINATION;
	<<FAIL>>						{
		EXO_THROW_EXCEPTION( UnknownToken, "Unknown token \"" + LEXEMESTR(Lexeme) + "\"" );
	}

	on_skip_range_open				{
		self_send(QUEX_TKN_TERMINATION);
	}

	"__HALT__"						=> QUEX_TKN_TERMINATION;
	"__FILE__"						=> QUEX_TKN_T_FILE;
	"__LINE__"						=> QUEX_TKN_T_LINE;
	"__TARGET__"					=> QUEX_TKN_T_TARGET;
	"__VERSION__"					=> QUEX_TKN_T_VERSION;
	"bool"							=> QUEX_TKN_T_TBOOL;
	"boolean"						=> QUEX_TKN_T_TBOOL;
	"int"							=> QUEX_TKN_T_TINT;
	"integer"						=> QUEX_TKN_T_TINT;
	"float"							=> QUEX_TKN_T_TFLOAT;
	"double"						=> QUEX_TKN_T_TFLOAT;
	"str"							=> QUEX_TKN_T_TSTRING;
	"string"						=> QUEX_TKN_T_TSTRING;
	"auto"							=> QUEX_TKN_T_TAUTO;
	"callable"						=> QUEX_TKN_T_TCALLABLE;

	"function"						=> QUEX_TKN_T_FUNCTION;
	"return"						=> QUEX_TKN_T_RETURN;

	"if"							=> QUEX_TKN_T_IF;
	"else"							=> QUEX_TKN_T_ELSE;
	"while"							=> QUEX_TKN_T_WHILE;
	"for"							=> QUEX_TKN_T_FOR;
	"break"							=> QUEX_TKN_T_BREAK;

	"class"							=> QUEX_TKN_T_CLASS;
	"extends"						=> QUEX_TKN_T_EXTENDS;
	"public"						=> QUEX_TKN_T_PUBLIC;
	"private"						=> QUEX_TKN_T_PRIVATE;
	"protected"						=> QUEX_TKN_T_PROTECTED;
	"->"							=> QUEX_TKN_T_PTR;
	"new"							=> QUEX_TKN_T_NEW;

	"delete"						=> QUEX_TKN_T_DELETE;
	"unset"							=> QUEX_TKN_T_DELETE;

	";"								=> QUEX_TKN_T_SEMICOLON;
	","								=> QUEX_TKN_T_COMMA;
	"..."							=> QUEX_TKN_T_VARG;

	"null"							=> QUEX_TKN_T_VNULL;
	"true"							=> QUEX_TKN_T_VTRUE;
	"false"							=> QUEX_TKN_T_VFALSE;
	[0-9]+							=> QUEX_TKN_S_INT(Lexeme);
	([0-9]+[.][0-9]*)				=> QUEX_TKN_S_FLOAT(Lexeme);

	"$"([_a-zA-Z\\]+[_a-zA-Z\\0-9]*)	=> QUEX_TKN_S_VAR(LexemeBegin+1,LexemeEnd);
	([_a-zA-Z\\]+[_a-zA-Z\\0-9]*)	=> QUEX_TKN_S_ID(Lexeme);

	"("								=> QUEX_TKN_T_LANGLE;
	")"								=> QUEX_TKN_T_RANGLE;
	"{"								=> QUEX_TKN_T_LBRACKET;
	"}"								=> QUEX_TKN_T_RBRACKET;
	"="								=> QUEX_TKN_T_ASSIGN;
	"=="							=> QUEX_TKN_T_EQ;
	"!="							=> QUEX_TKN_T_NE;
	"<"								=> QUEX_TKN_T_LT;
	"<="							=> QUEX_TKN_T_LE;
	">"								=> QUEX_TKN_T_GT;
	">="							=> QUEX_TKN_T_GE;
	"+"								=> QUEX_TKN_T_PLUS;
	"-"								=> QUEX_TKN_T_MINUS;
	"*"								=> QUEX_TKN_T_MUL;
	"/"								=> QUEX_TKN_T_DIV;

	"\""							{
		self_send(QUEX_TKN_T_QUOTE);
		self << DOUBLE_STRING;
		RETURN;
    }
}


mode DOUBLE_STRING:
<entry: EXO>
<exit:  EXO>
{
	<<EOF>>							=> QUEX_TKN_TERMINATION;
	<<FAIL>>						{
		EXO_THROW_EXCEPTION( UnknownToken, "Unknown token \"" + LEXEMESTR(Lexeme) + "\"" );
	}

	on_entry						{
		self_accumulator_clear();
	}

	on_exit							{ 
		self_accumulator_flush(QUEX_TKN_S_STRING); 
		self_send(QUEX_TKN_T_QUOTE);
	}

	[\r\n\t\f]+						{ self_accumulator_add(Lexeme, LexemeEnd); }
	"\\r"							{ QUEX_TYPE_CHARACTER* carriage = (QUEX_TYPE_CHARACTER*)"\r"; self_accumulator_add(carriage, (QUEX_TYPE_CHARACTER*)carriage+1); }
	"\\n"							{ QUEX_TYPE_CHARACTER* newline = (QUEX_TYPE_CHARACTER*)"\n"; self_accumulator_add(newline, (QUEX_TYPE_CHARACTER*)newline+1); }
	"\\t"							{ QUEX_TYPE_CHARACTER* tab = (QUEX_TYPE_CHARACTER*)"\t"; self_accumulator_add(tab, (QUEX_TYPE_CHARACTER*)tab+1); }
	"\\f"							{ QUEX_TYPE_CHARACTER* formfeed = (QUEX_TYPE_CHARACTER*)"\f"; self_accumulator_add(formfeed, (QUEX_TYPE_CHARACTER*)formfeed+1); }
	"\\b"							{ QUEX_TYPE_CHARACTER* backspace = (QUEX_TYPE_CHARACTER*)"\b"; self_accumulator_add(backspace, (QUEX_TYPE_CHARACTER*)backspace+1); }
	"\\e"							{ QUEX_TYPE_CHARACTER* escape = (QUEX_TYPE_CHARACTER*)"\e"; self_accumulator_add(escape, (QUEX_TYPE_CHARACTER*)escape+1); }
	"\\\""							{ self_accumulator_add(Lexeme, LexemeEnd); }
	"\\\\"							{ self_accumulator_add(Lexeme, LexemeEnd); }
	"\""							{ self << EXO; RETURN; }
	.								{ self_accumulator_add(Lexeme, LexemeEnd); }
}