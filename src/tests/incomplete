auto $c = auto $d;
string $i = '';
auto $c;
callable $f;

bool $t = $a ? true : false;

$a++;

std::$test;
src::tests::scalar::$a;

module custom::test
@version(1.0)
@depreceated
{
	int function test()
	{
		return( 1 );
	}
};

platform(Windows)
{
}
platform(POSIX)
{
	platform(Linux)
	{
	}
	platform(FreeBSD)
	{
	}
	platform(Android)
	{
	}
}


class Object
{
	/**
	 * Performs a addition with the operand and returns the result
	 */
	Object @+ ( Object rhs )
	{
	}

	/**
	 * Performs a subtraction with the operand and returns the result
	 */
	Object @- ( Object rhs )
	{
	}

	/**
	 * Performs a multiplication with the operand and returns the result
	 */
	Object @* ( Object rhs )
	{
	}

	/**
	 * Performs a division with the operand and returns the result
	 */
	Object @/ ( Object rhs )
	{
	}

	/**
	 * Performs a concatenation with the operand and returns the result
	 */
	Object @. ( Object rhs )
	{
	}

	/**
	 * Performs an assign
	 */
	Object operator = ( Object rhs )
	{
	}
}



auto function blabla1 { ; };
function() blabla2 { ; };
string function blabla3( string $s ) { $s; };

function blabla4( string $s = "", float $t = 1.5, int $u = 1 ) { $s; };
// call by name
blabla4( $t=0.5, $u=1, $s="t" );
// call by value
blabla4( "t", 0.5, 1 );

alias blabla5@blabla4;

func blabla6() (int, int) { return 3, 7 };
int $b;
int $a, $b = blabla6();


// user defined types
item $item0;
descendent\item $item;1
\fullqualified\item $item2;


function vaArg( ... )
{
	$1;
}